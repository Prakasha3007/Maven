#########################################################################
# Workflow Name : Maven
# Description   : Build, test, and deploy with Apache Maven.
# Version       : v3
#########################################################################

name: Maven

inputs:
  mavenPomFile:
    description: 'The relative path to the Maven POM file that defines the project configuration and dependencies.'
    required: true
    type: string
  goals:
    description: 'The Maven goals to execute, such as `clean`, `package`, `install`, etc.'
    required: false
    type: string   
  options:
    description: 'Additional command-line options to pass to the Maven command, such as `-DskipTests` or `--settings ./settings.xml`.'
    required: false
    type: string
    default: ''
  publishJUnitResults:
    required: true
    type: boolean
  testResultsFiles:
    required: true
    type: string
  allowBrokenSymlinks:
    required: true
    type: boolean  
  testRunTitle:
    description: 'A descriptive title for the test run, useful for identifying the purpose of the build.'
    required: false
    type: string
    default: 'Default Test Run'

runs:
  using: 'composite'
  steps:
    - name: Maven Task Header
      shell: pwsh
      run: |
        Write-Host "======================================================================="
        Write-Host "Task        : Maven"
        Write-Host "Description : Build, test, and deploy with Apache Maven."
        Write-Host "Version     : v3"
        Write-Host "======================================================================="
    
    - name: Validate inputs
      shell: pwsh
      run: |
        try {
          Write-Host "Validating inputs..."
          if (-not "${{ inputs.mavenPomFile }}") {
            Write-Error "'mavenPomFile' is required but not provided."
            exit 1
          }
          Write-Host "mavenPomFile: ${{ inputs.mavenPomFile }}"
          if ("${{ inputs.options }}") {
            Write-Host "options: ${{ inputs.options }}"
          }
          if ("${{ inputs.testRunTitle }}") {
            Write-Host "testRunTitle: ${{ inputs.testRunTitle }}"
          }
        } catch {
          Write-Error "Exception While Validating inputs: $_"
          exit 1
        }

    - name: Publish JUnit Test Results
      shell: pwsh
      run: |    
        # Get inputs
        $publishJUnitResults = [bool]::Parse("${{ inputs.publishJUnitResults }}")
        $testResultsFiles = '${{ inputs.testResultsFiles }}'
        $testRunTitle = '${{ inputs.testRunTitle }}'
        $allowBrokenSymlinks = [bool]::Parse("${{ inputs.allowBrokenSymlinks }}")
        $buildFolder = '${{ github.workspace }}'
      
        Write-Host "Publish JUnit Results: $publishJUnitResults"
        Write-Host "Test Results Files Pattern: $testResultsFiles"
        Write-Host "Test Run Title: $testRunTitle"
        Write-Host "Allow Broken Symlinks: $allowBrokenSymlinks"
        Write-Host "Build Folder: $buildFolder"
      
        if (-not $publishJUnitResults) {
            Write-Host "Publishing JUnit results is disabled."
            exit 0
        }
      
        # Debugging: List all .xml files in the workspace
        Write-Host "Listing all .xml files in the workspace..."
        Get-ChildItem -Path $buildFolder -Recurse -Filter "*.xml" | ForEach-Object { Write-Host $_.FullName }
      
        # Debugging: Test validity of each .xml file
        Write-Host "Testing validity of each .xml file..."
        Get-ChildItem -Path $buildFolder -Recurse -Filter "*.xml" |
            ForEach-Object {
                $filePath = $_.FullName
                Write-Host "File: $filePath"
                Write-Host "Is Valid: $(Test-Path $filePath -PathType Leaf)"
            }
      
        # Find matching JUnit result files
        $matchingJUnitResultFiles = Get-ChildItem -Path $buildFolder -Recurse -Filter "*.xml" |
            Where-Object { 
                $_.FullName -like $testResultsFiles -and 
                ($allowBrokenSymlinks -or (Test-Path $_.FullName -PathType Leaf)) # Corrected condition
            } |
            Select-Object -ExpandProperty FullName 
      
        # Debugging: Log matching files
        Write-Host "Debugging: Matching files after applying pattern and filters..."
        $matchingJUnitResultFiles | ForEach-Object { Write-Host $_ }
      
        # Check if any matching files are found
        if (-not $matchingJUnitResultFiles) {
            Write-Host "No test results found matching pattern: $testResultsFiles"
            exit 0
        }
        
        Write-Host "Found matching JUnit result files:"
        $matchingJUnitResultFiles | ForEach-Object { Write-Host $_ }
      
        # Publish test results (logic for publishing can be customized here)
        foreach ($file in $matchingJUnitResultFiles) {
            Write-Host "Publishing test result file: $file"
        }
        Write-Host "Test results published successfully with title: $testRunTitle."
