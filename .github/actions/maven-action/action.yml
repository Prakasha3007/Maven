#########################################################################
# Workflow Name : Maven
# Description   : Build, test, and deploy with Apache Maven.
# Version       : v3
#########################################################################

name: Maven

inputs:
  mavenPomFile:
    description: 'The relative path to the Maven POM file that defines the project configuration and dependencies.'
    required: true
    type: string
  goals:
    description: 'The Maven goals to execute, such as `clean`, `package`, `install`, etc.'
    required: false
    type: string   
  options:
    description: 'Additional command-line options to pass to the Maven command, such as `-DskipTests` or `--settings ./settings.xml`.'
    required: false
    type: string
    default: ''
  testRunTitle:
    description: 'A descriptive title for the test run, useful for identifying the purpose of the build.'
    required: false
    type: string
    default: 'Default Test Run'
  jdkVersionOption:
    description: 'A descriptive title for the test run, useful for identifying the purpose of the build.'
    required: false
    type: string
    default: 'default'  

runs:
  using: 'composite'
  steps:

    - name: Maven Task Header
      shell: pwsh
      run: |
        Write-Host "======================================================================="
        Write-Host "Task        : Maven"
        Write-Host "Description : Build, test, and deploy with Apache Maven."
        Write-Host "Version     : v3"
        Write-Host "======================================================================="

    - name: Validate inputs
      shell: pwsh
      run: |
        try {
          Write-Host "Validating inputs..."
          if (-not "${{ inputs.mavenPomFile }}") {
            Write-Error "'mavenPomFile' is required but not provided."
            exit 1
          }
          Write-Host "mavenPomFile: ${{ inputs.mavenPomFile }}"
          if ("${{ inputs.options }}") {
            Write-Host "options: ${{ inputs.options }}"
          }
          if ("${{ inputs.testRunTitle }}") {
            Write-Host "testRunTitle: ${{ inputs.testRunTitle }}"
          }
        } catch {
           Write-Error "Exception While Validating inputs: $_"
          exit 1
        }

    - name: Verify Maven Installation
      shell: pwsh
      run: mvn -v

   - name: Check and Switch to Existing JDK Version
     shell: pwsh
     run: |
        $version = "${{ inputs.jdkVersionOption }}".Trim()
        if (-not $version) { 
          Write-Error "Input JDK version is empty. Please provide a valid JDK version."
          exit 1
        }
    
        Write-Host "Requested JDK version: $version"
    
        # List installed JDK versions
        $jdkPaths = Get-ChildItem -Path "C:\Program Files\Java" -Directory
        if (-not $jdkPaths) {
          Write-Error "No JDK installations found in 'C:\Program Files\Java'."
          exit 1
        }
    
        Write-Host "Installed JDK versions:"
        $jdkPaths.Name | ForEach-Object { Write-Host " - $_" }
    
        # Normalize and match the requested version
        $matches = $jdkPaths | Where-Object { $_.Name -like "*$version*" }
        if (-not $matches) {
          Write-Error "No installed JDK version matches: $version"
          exit 1
        }
    
        # Select the highest matching version
        $selectedJdk = $matches | Sort-Object Name -Descending | Select-Object -First 1
        Write-Host "Using JDK version: $($selectedJdk.Name)"
    
        # Set JAVA_HOME and update PATH
        $env:JAVA_HOME = $selectedJdk.FullName
        $env:PATH = "$($env:JAVA_HOME)\bin;$($env:PATH)"
        Write-Host "JAVA_HOME set to: $env:JAVA_HOME"
    
        # Verify the JDK version
        $jdkVersionOutput = & java -version 2>&1
        Write-Host "JDK version in use: $jdkVersionOutput"
   

    - name: Run Maven Package
      shell: pwsh
      run: |
        $pom = "${{ inputs.mavenPomFile }}"
        $opts = "${{ inputs.options }}"
        $title = "${{ inputs.testRunTitle }}"
        $goal = "${{ inputs.goals }}"
    
        Write-Host "Starting Maven build..."
        if ($title) {
          Write-Host "Test Run Title: $title"
        }
        Write-Host "Using POM: $pom"
        Write-Host "Using goal: $goal"
        if ($opts) {
          Write-Host "Maven Options: $opts"
          $cmd = "mvn --batch-mode --file `"$pom`" $opts $goal"
        } else {
          $cmd = "mvn --batch-mode --file `"$pom`" $goal"
        }
    
        Write-Host "Running command: $cmd"
        try {
          Invoke-Expression $cmd
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Maven build failed!"
            exit $LASTEXITCODE
          }
          Write-Host "Maven build completed successfully."
        } catch {
          Write-Error "Maven build failed with an exception: $_"
          exit 1
        }
