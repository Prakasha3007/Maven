#########################################################################
# Workflow Name : Maven
# Description   : Build, test, and deploy with Apache Maven.
# Version       : v3
#########################################################################

name: Maven

inputs:
  mavenPomFile:
    description: 'The relative path to the Maven POM file that defines the project configuration and dependencies.'
    required: true
    type: string
  goals:
    description: 'The Maven goals to execute, such as `clean`, `package`, `install`, etc.'
    required: false
    type: string   
  options:
    description: 'Additional command-line options to pass to the Maven command, such as `-DskipTests` or `--settings ./settings.xml`.'
    required: false
    type: string
    default: ''
  testRunTitle:
    description: 'A descriptive title for the test run, useful for identifying the purpose of the build.'
    required: false
    type: string
    default: 'Default Test Run'
  javaHomeOption:
    description: 'Option to set JAVA_HOME (JDKVersion or Path)'
    required: true
    type: string
  jdkVersionOption:
    description: 'JDK version to use (e.g., 1.8, 11)'
    required: false
    type: string
  jdkDirectory:
    description: 'Custom JDK directory path'
    required: false
    type: string

runs:
  using: 'composite'
  steps:
    - name: Maven Task Header
      shell: pwsh
      run: |
        Write-Host "======================================================================="
        Write-Host "Task        : Maven"
        Write-Host "Description : Build, test, and deploy with Apache Maven."
        Write-Host "Version     : v3"
        Write-Host "======================================================================="
    - name: Validate inputs
      shell: pwsh
      run: |
        try {
          Write-Host "Validating inputs..."
          if (-not "${{ inputs.mavenPomFile }}") {
            Write-Error "'mavenPomFile' is required but not provided."
            exit 1
          }
          Write-Host "mavenPomFile: ${{ inputs.mavenPomFile }}"
          if ("${{ inputs.options }}") {
            Write-Host "options: ${{ inputs.options }}"
          }
          if ("${{ inputs.testRunTitle }}") {
            Write-Host "testRunTitle: ${{ inputs.testRunTitle }}"
          }
        } catch {
          Write-Error "Exception While Validating inputs: $_"
          exit 1
        }		  

    - name: Validate and Set JAVA_HOME
      shell: pwsh
      run: |
        try {
          # Retrieve inputs
          $javaHomeOption = "${{ inputs.javaHomeOption }}"
          $jdkVersionOption = "${{ inputs.jdkVersionOption }}"
          $jdkDirectory = "${{ inputs.jdkDirectory }}"
     
          Write-Host "Validating JAVA_HOME configuration..."
          Write-Host "javaHomeOption: $javaHomeOption"
          Write-Host "jdkDirectory: $jdkDirectory"
     
          if (-not $jdkDirectory) {
            Write-Error "Error: 'jdkDirectory' is required when 'javaHomeOption' is set to '$javaHomeOption'."
            exit 1
          }
     
            $javaExePath = Join-Path $jdkDirectory "bin\java.exe"
          if (-not (Test-Path $javaExePath)) {
            Write-Error "Error: The specified JDK directory does not contain a valid Java executable: $javaExePath"
            exit 1
          }
     
          if ($javaHomeOption -eq "JDKVersion") {
            if (-not $jdkVersionOption) {
              Write-Error "Error: 'jdkVersionOption' is required when 'javaHomeOption' is set to 'JDKVersion'."
              exit 1
            }
            Write-Host "JDK Version Option: $jdkVersionOption"
          } elseif ($javaHomeOption -ne "Path") {
            Write-Error "Error: Invalid value for 'javaHomeOption'. Expected 'JDKVersion' or 'Path'."
            exit 1
          }
     
          # Set JAVA_HOME for current step
          $env:JAVA_HOME = $jdkDirectory
     
          # Remove existing Java entries from PATH
          $cleanedPath = ($env:PATH -split ';' | Where-Object { $_ -notmatch 'Java' -and $_ -ne '' }) -join ';'
            $env:PATH = "$jdkDirectory\bin;$cleanedPath"
     
          # Output for debugging
          Write-Host "JAVA_HOME: $env:JAVA_HOME"
          Write-Host "Resolved java path: $(Get-Command java).Source"
          & java -version
     
          # Persist environment variables for next steps
          "`nJAVA_HOME=$jdkDirectory" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            "`nPATH=$jdkDirectory\bin;$cleanedPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
     
          Write-Host "JAVA_HOME and PATH exported successfully for subsequent steps."
        } catch {
          Write-Error "An error occurred during JAVA_HOME validation: $_"
          exit 1
        }
 
    - name: Run Maven Package
      shell: pwsh
      run: |
        Write-Host "Verifying Java version before running Maven..."
        Write-Host "JAVA_HOME: $env:JAVA_HOME"
        Write-Host "Resolved java path: $(Get-Command java).Source"
        & java -version
     
        $pom = "${{ inputs.mavenPomFile }}"
        $opts = "${{ inputs.options }}"
        $title = "${{ inputs.testRunTitle }}"
        $goal = "${{ inputs.goals }}"
     
        Write-Host "Starting Maven build..."
        if ($title) {
          Write-Host "Test Run Title: $title"
        }
        Write-Host "Using POM: $pom"
        Write-Host "Using goal: $goal"
        
        if ($opts) {
          Write-Host "Maven Options: $opts"
          $cmd = "mvn --batch-mode --file `"$pom`" $opts $goal"
        } else {
          $cmd = "mvn --batch-mode --file `"$pom`" $goal"
        }
     
        Write-Host "Running command: $cmd"
        try {
          Invoke-Expression $cmd
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Maven build failed!"
            exit $LASTEXITCODE
          }
          Write-Host "Maven build completed successfully."
        } catch {
          Write-Error "Maven build failed with an exception: $_"
          exit 1
        }
