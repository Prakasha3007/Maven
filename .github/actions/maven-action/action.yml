#########################################################################
# Workflow Name : Maven
# Description   : Build, test, and deploy with Apache Maven.
# Version       : v3
#########################################################################

name: Maven

inputs:
  mavenPomFile:
    description: 'The relative path to the Maven POM file that defines the project configuration and dependencies.'
    required: true
    type: string
  goals:
    description: 'The Maven goals to execute, such as `clean`, `package`, `install`, etc.'
    required: false
    type: string   
  options:
    description: 'Additional command-line options to pass to the Maven command, such as `-DskipTests` or `--settings ./settings.xml`.'
    required: false
    type: string
    default: ''
  publishJUnitResults:
    required: true
    type: boolean
  testResultsFiles:
    required: true
    type: string 
  testRunTitle:
    description: 'A descriptive title for the test run, useful for identifying the purpose of the build.'
    required: false
    type: string
    default: 'Default Test Run'

runs:
  using: 'composite'
  steps:
    - name: Maven Task Header
      shell: pwsh
      run: |
        Write-Host "======================================================================="
        Write-Host "Task        : Maven"
        Write-Host "Description : Build, test, and deploy with Apache Maven."
        Write-Host "Version     : v3"
        Write-Host "======================================================================="
    
    - name: Validate inputs
      shell: pwsh
      run: |
        try {
          Write-Host "Validating inputs..."
          if (-not "${{ inputs.mavenPomFile }}") {
            Write-Error "'mavenPomFile' is required but not provided."
            exit 1
          }
          Write-Host "mavenPomFile: ${{ inputs.mavenPomFile }}"
          if ("${{ inputs.options }}") {
            Write-Host "options: ${{ inputs.options }}"
          }
          if ("${{ inputs.testRunTitle }}") {
            Write-Host "testRunTitle: ${{ inputs.testRunTitle }}"
          }
        } catch {
          Write-Error "Exception While Validating inputs: $_"
          exit 1
        }

    - name: Check Specific File
      shell: pwsh
      run: |
        $filePath = '${{ github.workspace }}\target\surefire-reports\TEST-App.xml'
        if (Test-Path $filePath) {
            Write-Host "File exists: $filePath"
        } else {
            Write-Host "File does not exist: $filePath"
        }

    - name: Publish JUnit Test Results
      shell: pwsh
      run: |
        # Debugging input values
        Write-Host "DEBUG: Inputs received:"
        Write-Host "publishJUnitResults: ${{ inputs.publishJUnitResults }}"
        Write-Host "testResultsFiles: ${{ inputs.testResultsFiles }}"
        Write-Host "testRunTitle: ${{ inputs.testRunTitle }}"
    
        # Get inputs
        $publishJUnitResults = [bool]::Parse("${{ inputs.publishJUnitResults }}")
        $testResultsFiles = '${{ inputs.testResultsFiles }}'
        $testRunTitle = '${{ inputs.testRunTitle }}'
        $buildFolder = '${{ github.workspace }}'
    
        Write-Host "Publish JUnit Results: $publishJUnitResults"
        Write-Host "Test Results Files Pattern: $testResultsFiles"
        Write-Host "Test Run Title: $testRunTitle"
        Write-Host "Build Folder: $buildFolder"
    
        if (-not $publishJUnitResults) {
            Write-Host "Publishing JUnit results is disabled."
            exit 0
        }
    
        # Find matching JUnit result files
        $matchingJUnitResultFiles = Get-ChildItem -Path $buildFolder -Recurse -Filter "*.xml" |
            Where-Object { 
                $_.FullName -like $testResultsFiles
            } |
            Select-Object -ExpandProperty FullName
    
        # Check if any matching files are found
        if (-not $matchingJUnitResultFiles) {
            Write-Host "No test results found matching pattern: $testResultsFiles"
            exit 0
        }
    
        Write-Host "Found matching JUnit result files:"
        $matchingJUnitResultFiles | ForEach-Object { Write-Host $_ }
    
        # Publish test results (logic for publishing can be customized here)
        foreach ($file in $matchingJUnitResultFiles) {
            Write-Host "Publishing test result file: $file"
            # Add logic to upload or process the test results as needed
        }
    
        Write-Host "Test results published successfully with title: $testRunTitle."

    - name: Run Maven Package
      shell: pwsh
      run: |
        $pom = "${{ inputs.mavenPomFile }}"
        $opts = "${{ inputs.options }}"
        $title = "${{ inputs.testRunTitle }}"
        $goal = "${{ inputs.goals }}"
     
        Write-Host "Starting Maven build..."
        if ($title) {
          Write-Host "Test Run Title: $title"
        }
        Write-Host "Using POM: $pom"
        Write-Host "Using goal: $goal"
        
        if ($opts) {
          Write-Host "Maven Options: $opts"
          $cmd = "mvn --batch-mode --file `"$pom`" $opts $goal"
        } else {
          $cmd = "mvn --batch-mode --file `"$pom`" $goal"
        }
     
        Write-Host "Running command: $cmd"
        try {
          Invoke-Expression $cmd
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Maven build failed!"
            exit $LASTEXITCODE
          }
          Write-Host "Maven build completed successfully."
        } catch {
          Write-Error "Maven build failed with an exception: $_"
          exit 1
         } 
