name: Maven Reusable Workflow

on:
  workflow_call:
    inputs:
      mavenPomFile:
        description: 'Path to the Maven POM file'
        required: true
        type: string
      goals:
        description: 'Maven goals to execute (e.g., clean package)'
        required: false
        type: string   
      options:
        description: 'Additional Maven command-line options'
        required: false
        type: string
        default: ''
      testRunTitle:
        description: 'Title for the test run'
        required: false
        type: string
        default: 'Default Test Run'
      javaHomeOption:
        description: 'Option to set JAVA_HOME (JDKVersion or Path)'
        required: true
        type: string
      jdkVersionOption:
        description: 'JDK version to use (e.g., 1.8, 11)'
        required: false
        type: string
      jdkDirectory:
        description: 'Custom JDK directory path'
        required: false
        type: string

jobs:
  maven-build:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Maven Task Header
        run: |
          Write-Host "======================================================================="
          Write-Host "Task        : Maven"
          Write-Host "Description : Build, test, and deploy with Apache Maven."
          Write-Host "Version     : v3"
          Write-Host "======================================================================="

      - name: Validate and Set JAVA_HOME
        shell: pwsh
        run: |
          try {
            # Retrieve inputs
            $javaHomeOption = "${{ inputs.javaHomeOption }}"
            $jdkVersionOption = "${{ inputs.jdkVersionOption }}"
            $jdkDirectory = "${{ inputs.jdkDirectory }}"

            Write-Host "Validating JAVA_HOME configuration..."
            Write-Host "javaHomeOption: $javaHomeOption"

            # Common validation for JDK directory
            if (-not $jdkDirectory) {
              Write-Error "Error: 'jdkDirectory' is required when 'javaHomeOption' is set to '$javaHomeOption'."
              exit 1
            }

            $javaExePath = Join-Path $jdkDirectory "bin\java.exe"
            if (-not (Test-Path $javaExePath)) {
              Write-Error "Error: The specified JDK directory does not contain a valid Java executable: $javaExePath"
              exit 1
            }

            # Handle JDKVersion option
            if ($javaHomeOption -eq "JDKVersion") {
              if (-not $jdkVersionOption) {
                Write-Error "Error: 'jdkVersionOption' is required when 'javaHomeOption' is set to 'JDKVersion'."
                exit 1
              }
              Write-Host "JDK Version Option: $jdkVersionOption"
            } elseif ($javaHomeOption -ne "Path") {
              Write-Error "Error: Invalid value for 'javaHomeOption'. Expected 'JDKVersion' or 'Path'."
              exit 1
            }

            # Set JAVA_HOME
            Write-Host "Setting JAVA_HOME to: $jdkDirectory"
            [Environment]::SetEnvironmentVariable("JAVA_HOME", $jdkDirectory, "Process")
            $env:JAVA_HOME = $jdkDirectory
            #$env:PATH = "$jdkDirectory\bin;$env:PATH"

            # Clean PATH of any other Java entries to avoid conflict
            $cleanedPath = ($env:PATH -split ';' | Where-Object { $_ -notmatch 'Java' -and $_ -ne '' }) -join ';'
            $env:PATH = "$jdkDirectory\bin;$cleanedPath"
       
            # Print JAVA_HOME and check resolved Java path
            Write-Host "JAVA_HOME is now: $env:JAVA_HOME"
            Write-Host "Updated PATH: $env:PATH"
            $javaPath = Get-Command java | Select-Object -ExpandProperty Source
            Write-Host "Resolved java path: $javaPath"

            # Verify JDK version
            Write-Host "Verifying JDK version..."
            & $javaExePath -version
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Error: Failed to verify JDK version at: $javaExePath"
              exit $LASTEXITCODE
            }
            Write-Host "JAVA_HOME set successfully and JDK version verified."
          } catch {
            Write-Error "An error occurred during JAVA_HOME validation: $_"
            exit 1
          }

      - name: Run Maven Package
        shell: pwsh
        run: |
          # Verify Java version before running Maven
          Write-Host "Verifying Java version before running Maven..."
          & java -version
          $pom = "${{ inputs.mavenPomFile }}"
          $opts = "${{ inputs.options }}"
          $title = "${{ inputs.testRunTitle }}"
          $goal = "${{ inputs.goals }}"
      
          Write-Host "Starting Maven build..."
          if ($title) {
            Write-Host "Test Run Title: $title"
          }
          Write-Host "Using POM: $pom"
          Write-Host "Using goal: $goal"
          if ($opts) {
            Write-Host "Maven Options: $opts"
            $cmd = "mvn --batch-mode --file `"$pom`" $opts $goal"
          } else {
            $cmd = "mvn --batch-mode --file `"$pom`" $goal"
          }
      
          Write-Host "Running command: $cmd"
          try {
            Invoke-Expression $cmd
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Maven build failed!"
              exit $LASTEXITCODE
            }
            Write-Host "Maven build completed successfully."
          } catch {
            Write-Error "Maven build failed with an exception: $_"
            exit 1
          }
