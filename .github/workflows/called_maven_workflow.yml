#########################################################################
# Workflow Name : Maven
# Description   : Build, test, and deploy with Apache Maven.
# Version       : v3
#########################################################################
 
name: Maven Reusable Workflow
 
on:
  workflow_call:
    inputs:
      mavenPomFile:
        description: 'Path to the Maven POM file'
        required: true
        type: string
      goals:
        description: ''
        required: false
        type: string   
      options:
        description: 'Additional Maven command-line options'
        required: false
        type: string
        default: ''
      testRunTitle:
        description: 'Title for the test run'
        required: false
        type: string
        default: 'Default Test Run'
      jdkVersionOption:
       description: 'A descriptive title for the test run, useful for identifying the purpose of the build.'
       required: false
       type: string
      
 
jobs:
  maven-build:
    runs-on: windows-latest
 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
 
      - name: Maven Task Header
        run: |
          Write-Host "======================================================================="
          Write-Host "Task        : Maven"
          Write-Host "Description : Build, test, and deploy with Apache Maven."
          Write-Host "Version     : v3"
          Write-Host "======================================================================="
 
      - name: Validate inputs
        shell: pwsh
        run: |
          try {
            Write-Host "Validating inputs..."
            if (-not "${{ inputs.mavenPomFile }}") {
              Write-Error "'mavenPomFile' is required but not provided."
              exit 1
            }
            Write-Host "mavenPomFile: ${{ inputs.mavenPomFile }}"
            if ("${{ inputs.options }}") {
              Write-Host "options: ${{ inputs.options }}"
            }
            if ("${{ inputs.testRunTitle }}") {
              Write-Host "testRunTitle: ${{ inputs.testRunTitle }}"
            }
          } catch {
            Write-Error $_.Exception.Message
            exit 1
          }

      - name: Dynamically list all JDKs on all drives
        shell: pwsh
        run: |
          Write-Host "Scanning all drives for JDKs..."
          $drives = Get-PSDrive -PSProvider 'FileSystem' | Where-Object { $_.Free -gt 0 }
          
          foreach ($drive in $drives) {
            $root = $drive.Root
            Write-Host "`Searching in $root..."
            try {
              Get-ChildItem -Path "$root" -Directory -Recurse -ErrorAction SilentlyContinue |
              Where-Object { $_.Name -like "jdk*" -or $_.Name -like "java*" } |
              ForEach-Object {
                $javaExe = Join-Path $_.FullName "bin\java.exe"
                if (Test-Path $javaExe) {
                  Write-Host "`Found: $javaExe"
                  & $javaExe -version
                }
              }
            } catch {
              Write-Host "Failed to access $root"
            }
          }   
 
      - name: Run Maven Package
        shell: pwsh
        run: |
          $pom = "${{ inputs.mavenPomFile }}"
          $opts = "${{ inputs.options }}"
          $title = "${{ inputs.testRunTitle }}"
          $goal = "${{ inputs.goals }}"
      
          Write-Host "Starting Maven build..."
          if ($title) {
            Write-Host "Test Run Title: $title"
          }
          Write-Host "Using POM: $pom"
          Write-Host "Using goal: $goal"
          if ($opts) {
            Write-Host "Maven Options: $opts"
            $cmd = "mvn --batch-mode --file `"$pom`" $opts $goal"
          } else {
            $cmd = "mvn --batch-mode --file `"$pom`" $goal"
          }
      
          Write-Host "Running command: $cmd"
          try {
            Invoke-Expression $cmd
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Maven build failed!"
              exit $LASTEXITCODE
            }
            Write-Host "Maven build completed successfully."
          } catch {
            Write-Error "Maven build failed with an exception."
            Write-Error $_.Exception.Message
            exit 1
          }
      
